interface ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!

  """
  A unique identifier for the record
  """
  id: ID!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of AddUserToProject
"""
input AddUserToProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  locationId: ID!
  projectId: ID!
  roleId: ID!
  userId: ID!
}

"""
Autogenerated return type of AddUserToProject
"""
type AddUserToProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error!]!
  success: Boolean!
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error!]!
  success: Boolean!
}

"""
Autogenerated input type of DeleteUser
"""
input DeleteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteUser
"""
type DeleteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error!]!
  success: Boolean!
}

type Error {
  """
  The field the error relates to
  """
  field: String!

  """
  The error message
  """
  message: String!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of InviteUser
"""
input InviteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  locationId: ID!
  name: String!
  projectId: ID!
  roleId: ID!
}

"""
Autogenerated return type of InviteUser
"""
type InviteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error!]!
  success: Boolean!
}

type Location implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  projects: [Project!]

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
  users: [User!]
}

type Mutation {
  """
  Adds user with specified role and location to project
  """
  addUserToProject(input: AddUserToProjectInput!): AddUserToProjectPayload

  """
  Creates a project
  """
  createProject(input: CreateProjectInput!): CreateProjectPayload

  """
  Deletes the specified user
  """
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  """
  Invites user by email, name, project, role and location
  """
  inviteUser(input: InviteUserInput!): InviteUserPayload

  """
  Login for users
  """
  login(email: String!, password: String!): User

  """
  Logout for users
  """
  logout: Boolean

  """
  Removes the specified user from project
  """
  removeUserFromProject(input: RemoveUserFromProjectInput!): RemoveUserFromProjectPayload
  resetPassword(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): Boolean

  """
  Send password reset instructions to users email
  """
  sendResetPasswordInstructions(email: String!): Boolean

  """
  Sign up for users
  """
  signUp(email: String!, name: String!, password: String!, passwordConfirmation: String!): User

  """
  JWT token login
  """
  tokenLogin: User

  """
  Update user
  """
  updateUser(password: String, passwordConfirmation: String): User
}

type Project implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  id: ID!
  locations: [Location!]
  name: String!
  roles: [Role!]

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
  users: [User!]
}

type Query {
  """
  Gets the specified location
  """
  location(id: ID!): Location

  """
  Gets all locations for current user
  """
  locations: [Location!]

  """
  Gets the specified project
  """
  project(id: ID!): Project

  """
  Gets all projects for current user
  """
  projects: [Project!]

  """
  Gets the specified role
  """
  role(id: ID!): Role

  """
  Gets all roles for current user
  """
  roles: [Role!]

  """
  Gets the specified user
  """
  user(id: ID!): User

  """
  Gets all users
  """
  users: [User!]
}

"""
Autogenerated input type of RemoveUserFromProject
"""
input RemoveUserFromProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectId: ID!
  userId: ID!
}

"""
Autogenerated return type of RemoveUserFromProject
"""
type RemoveUserFromProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error!]!
  success: Boolean!
}

type Role implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  projects: [Project!]

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
  users: [User!]
}

type User implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  locations: [Location!]
  name: String!
  projects: [Project!]
  roles: [Role!]
  token: String!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}